package org.aion.unity;

import avm.Address;
import avm.Blockchain;
import avm.Result;
import org.aion.avm.tooling.abi.Callable;
import org.aion.avm.tooling.abi.Initializable;
import org.aion.avm.userlib.AionMap;
import org.aion.avm.userlib.abi.ABIDecoder;
import org.aion.avm.userlib.abi.ABIStreamingEncoder;

import java.math.BigInteger;
import java.util.Map;

/**
 * A stake delegation registry manages a list of registered pools, is the endpoint
 * for delegators/pool owners to interact with different pools.
 * <p>
 * Workflow for pool operator:
 * - Register a staker;
 * - Register the staker as a pool;
 * - Add the pool registry as a listener to the staker;
 * - Set the coinbase address to the address of the pool coinbase contract.
 */
public class PoolRegistry {

    // TODO: replace object graph-based collections with key-value storage
    // TODO: replace long with BigInteger
    // TODO: add meta data and commission rate setters/getters
    // TODO: add events

    public static final BigInteger MIN_SELF_STAKE = BigInteger.valueOf(1000L);

    @Initializable
    private static Address stakerRegistry;

    private static byte[] poolCoinbaseContract;
    private static byte[] poolCustodianContract;

    private static Map<Address, PoolState> pools = new AionMap<>();

    static {
        poolCoinbaseContract = hexStringToByteArray("");
        poolCustodianContract = hexStringToByteArray("");
    }

    @Callable
    public static Address getStakerRegistry() {
        requireNoValue();
        return stakerRegistry;
    }

    /**
     * Registers a pool in the registry.
     *
     * @param signingAddress
     * @param commissionRate the pool commission rate
     * @return the pool coinbase address
     */
    @Callable
    public static void registerPool(Address signingAddress, int commissionRate, byte[] metaDataUrl, byte[] metaDataContentHash) {
        // sanity check
        require(commissionRate >= 0 && commissionRate <= 100);
        requireNoValue();
        // TODO: sanity checks on metaDataUrl and metaDataContentHash

        Address caller = Blockchain.getCaller();

        // make sure no one has registered as a staker using this identity
        require(isStakerRegistered(caller));

        // make sure no one has registered as a pool using this identity
        require(!pools.containsKey(caller));

        Address poolRegistry =  Blockchain.getAddress();

        // step 1: deploy a coinbase contract
        System.arraycopy(poolRegistry.toByteArray(), 0, poolCoinbaseContract, poolCoinbaseContract.length - Address.LENGTH, Address.LENGTH);
        Result result = Blockchain.create(BigInteger.ZERO, poolCoinbaseContract, Blockchain.getRemainingEnergy());
        require(result.isSuccess());
        Address coinbaseAddress = new Address(result.getReturnData());

        // step 2: deploy a custodian contract
        System.arraycopy(poolRegistry.toByteArray(), 0, poolCustodianContract, poolCustodianContract.length - Address.LENGTH * 2 - 1, Address.LENGTH);
        System.arraycopy(stakerRegistry.toByteArray(), 0, poolCustodianContract, poolCustodianContract.length - Address.LENGTH, Address.LENGTH);
        result = Blockchain.create(BigInteger.ZERO, poolCustodianContract, Blockchain.getRemainingEnergy());
        require(result.isSuccess());
        Address custodianAddress = new Address(result.getReturnData());

        // step 3: create a staker in the staker registry
        /*
        registerStaker(Address identityAddress, Address managementAddress,
                                      Address signingAddress, Address coinbaseAddress, Address selfBondAddress)
         */
        byte[] registerStakerCall = new ABIStreamingEncoder()
                .encodeOneString("registerStaker")
                .encodeOneAddress(caller)
                .encodeOneAddress(poolRegistry)
                .encodeOneAddress(signingAddress)
                .encodeOneAddress(coinbaseAddress)
                .encodeOneAddress(custodianAddress)
                .toBytes();
        secureCall(stakerRegistry, BigInteger.ZERO, registerStakerCall, Blockchain.getRemainingEnergy());

        // step 4: add the pool registry as a listener in the staker registry
        byte[] addListenerCall = new ABIStreamingEncoder()
                .encodeOneString("addListener")
                .encodeOneAddress(caller)
                .encodeOneAddress(poolRegistry)
                .toBytes();
        secureCall(stakerRegistry, BigInteger.ZERO, addListenerCall, Blockchain.getRemainingEnergy());

        // step 5: update pool state
        PoolState ps = new PoolState(caller, coinbaseAddress, custodianAddress, commissionRate, metaDataUrl, metaDataContentHash);
        pools.put(caller, ps);
    }

    /**
     * Updates the signing address of a staker. Owner only.
     *
     * @param staker the staker address
     * @param newAddress the new signing address
     */
    @Callable
    public static void setSigningAddress(Address staker, Address newAddress) {
        requireNonNull(newAddress);
        requireNoValue();
        require(Blockchain.getCaller().equals(staker));
        requirePool(staker);

        byte[] data = new ABIStreamingEncoder()
                .encodeOneString("setCoinbaseAddress")
                .encodeOneAddress(staker)
                .encodeOneAddress(newAddress)
                .toBytes();
        secureCall(stakerRegistry, BigInteger.ZERO, data, Blockchain.getRemainingEnergy());
    }

    /**
     * Delegates stake to a pool.
     *
     * @param pool the pool address
     */
    @Callable
    public static void delegate(Address pool) {
        Address caller = Blockchain.getCaller();
        BigInteger value = Blockchain.getValue();
        requirePool(pool);
        requirePositive(value);

        detectBlockRewards(pool);

        // transfers the value to the custodian contract if it's from the pool owner.
        // The reason for this is to make the stake (value) in case the pool misbehaves.
        PoolState ps = pools.get(pool);
        if (caller.equals(pool)) {
            secureCall(ps.custodianAddress, value, new byte[0], Blockchain.getRemainingEnergy());
        }

        delegate(caller, pool, Blockchain.getValue(), true);
    }

    private static void delegate(Address delegator, Address pool, BigInteger value, boolean doVote) {
        PoolState ps = pools.get(pool);

        if (doVote) {
            if (delegator.equals(pool)) {
                byte[] data = new ABIStreamingEncoder()
                        .encodeOneString("vote")
                        .encodeOneAddress(pool)
                        .encodeOneLong(value.longValue())
                        .toBytes();
                secureCall(ps.custodianAddress, BigInteger.ZERO, data, Blockchain.getRemainingEnergy());
            } else {
                byte[] data = new ABIStreamingEncoder()
                        .encodeOneString("vote")
                        .encodeOneAddress(pool)
                        .toBytes();
                secureCall(stakerRegistry, value, data, Blockchain.getRemainingEnergy());
            }
        }

        BigInteger previousStake = getOrDefault(ps.delegators, delegator, BigInteger.ZERO);
        ps.delegators.put(delegator, previousStake.add(value));

        // update rewards state machine
        ps.rewards.onVote(delegator, Blockchain.getBlockNumber(), value.longValue());

        // possible pool state change
        if (delegator.equals(ps.stakerAddress)) {
            checkPoolState(ps.stakerAddress);
        }
    }

    /**
     * Revokes stake to a pool.
     *
     * @param pool   the pool address
     * @param amount the amount of stake to undelegate
     */
    @Callable
    public static long undelegate(Address pool, long amount) {
        requirePool(pool);
        requirePositive(amount);
        requireNoValue();

        detectBlockRewards(pool);

        return undelegate(Blockchain.getCaller(), pool, amount, true);
    }

    private static long undelegate(Address delegator, Address pool, long amount, boolean doUnvote) {
        PoolState ps = pools.get(pool);

        BigInteger previousStake = getOrDefault(ps.delegators, delegator, BigInteger.ZERO);
        BigInteger amountBI = BigInteger.valueOf(amount);
        require(previousStake.compareTo(amountBI) >= 0);
        ps.delegators.put(delegator, previousStake.subtract(amountBI));

        long id = -1;
        if (doUnvote) {
            byte[] data = new ABIStreamingEncoder()
                    .encodeOneString("unvoteTo")
                    .encodeOneAddress(pool)
                    .encodeOneLong(amount)
                    .encodeOneAddress(delegator)
                    .toBytes();
            Result result = secureCall(
                    delegator.equals(pool) ? ps.custodianAddress : stakerRegistry,
                    BigInteger.ZERO, data, Blockchain.getRemainingEnergy());
            id = new ABIDecoder(result.getReturnData()).decodeOneLong();
        }

        // update rewards state machine
        ps.rewards.onUnvote(delegator, Blockchain.getBlockNumber(), amount);

        // possible pool state change
        if (delegator.equals(ps.stakerAddress)) {
            checkPoolState(ps.stakerAddress);
        }

        return id;
    }

    /**
     * Delegates block rewards to a pool
     *
     * @param pool the pool address
     */
    @Callable
    public static void redelegate(Address pool) {
        Address caller = Blockchain.getCaller();
        requirePool(pool);
        requireNoValue();

        detectBlockRewards(pool);

        PoolState ps = pools.get(pool);

        // do a withdraw
        long amount = ps.rewards.onWithdraw(caller, Blockchain.getBlockNumber());
        if (caller.equals(ps.stakerAddress)) {
            amount += ps.rewards.onWithdrawOperator();
        }

        if (amount > 0) {
            // transfer the rewards to the custodian contract
            if (caller.equals(pool)) {
                secureCall(ps.custodianAddress, BigInteger.valueOf(amount), new byte[0], Blockchain.getRemainingEnergy());
            }

            delegate(caller, pool, BigInteger.valueOf(amount), true);
        }
    }

    private static class StakeTransfer {
        Address initiator;
        Address fromPool;
        Address toPool;
        Address recipient;
        long amount;

        public StakeTransfer(Address initiator, Address fromPool, Address toPool, Address recipient, long amount) {
            this.initiator = initiator;
            this.fromPool = fromPool;
            this.toPool = toPool;
            this.recipient = recipient;
            this.amount = amount;
        }
    }

    private static Map<Long, StakeTransfer> transfers = new AionMap<>();

    /**
     * Transfers stake from one pool to another pool.
     *
     * @param fromPool the from pool address
     * @param toPool   the to pool address
     * @param amount   the amount of stake to transfer
     * @return the pending transfer id
     */
    @Callable
    public static long transferStake(Address fromPool, Address toPool, long amount) {
        Address caller = Blockchain.getCaller();
        requirePool(fromPool);
        requirePool(toPool);
        requirePositive(amount);
        requireNoValue();
        require(!fromPool.equals(toPool));

        detectBlockRewards(fromPool);
        detectBlockRewards(toPool);

        PoolState ps = pools.get(fromPool);
        BigInteger previousStake1 = getOrDefault(ps.delegators, caller, BigInteger.ZERO);

        BigInteger amountBI = BigInteger.valueOf(amount);
        require(previousStake1.compareTo(amountBI) >= 0);
        ps.delegators.put(caller, previousStake1.subtract(amountBI));

        // update rewards state machine
        ps.rewards.onUnvote(caller, Blockchain.getBlockNumber(), amount);

        // if the stake is from the pool owner, transfer stake ownership back to the
        // pool registry, otherwise keep the stake in the custodian contract.
        Address recipient = caller.equals(fromPool) ? Blockchain.getAddress() : ps.custodianAddress;
        byte[] data = new ABIStreamingEncoder()
                .encodeOneString("transferStakeTo")
                .encodeOneAddress(fromPool)
                .encodeOneAddress(toPool)
                .encodeOneLong(amount)
                .encodeOneAddress(recipient)
                .toBytes();
        Result result = secureCall(
                caller.equals(fromPool) ? ps.custodianAddress : stakerRegistry,
                BigInteger.ZERO, data, Blockchain.getRemainingEnergy());

        long id = new ABIDecoder(result.getReturnData()).decodeOneLong();
        transfers.put(id, new StakeTransfer(caller, fromPool, toPool, recipient, amount));

        // possible pool state change
        if (caller.equals(ps.stakerAddress)) {
            checkPoolState(ps.stakerAddress);
        }

        return id;
    }

    /**
     * Returns the stake of a delegator to a pool.
     *
     * @param pool      the pool address
     * @param delegator the delegator address
     * @return the amount of stake
     */
    @Callable
    public static long getStake(Address pool, Address delegator) {
        requirePool(pool);
        requireNonNull(delegator);
        requireNoValue();

        return getOrDefault(pools.get(pool).delegators, delegator, BigInteger.ZERO).longValue();
    }

    /**
     * Returns the self-bond stake to a pool.
     *
     * @param pool the pool address
     * @return the amount of stake
     */
    @Callable
    public static long getSelfStake(Address pool) {
        requirePool(pool);
        requireNoValue();

        PoolState ps = pools.get(pool);
        return getOrDefault(ps.delegators, ps.stakerAddress, BigInteger.ZERO).longValue();
    }

    /**
     * Returns the total stake of a pool.
     *
     * @param pool the pool address
     * @return the amount of stake
     */
    @Callable
    public static long getTotalStake(Address pool) {
        requirePool(pool);
        requireNoValue();

        byte[] data = new ABIStreamingEncoder()
                .encodeOneString("getTotalStake")
                .encodeOneAddress(pool)
                .toBytes();
        Result result = secureCall(stakerRegistry, BigInteger.ZERO, data, Blockchain.getRemainingEnergy());
        return new ABIDecoder(result.getReturnData()).decodeOneLong();
    }

    /**
     * Finalizes an un-vote operation.
     *
     * @param id pending unvote id
     */
    @Callable
    public static void finalizeUnvote(long id) {
        requireNoValue();

        byte[] data = new ABIStreamingEncoder()
                .encodeOneString("finalizeUnvote")
                .encodeOneLong(id)
                .toBytes();
        secureCall(stakerRegistry, BigInteger.ZERO, data, Blockchain.getRemainingEnergy());
    }

    /**
     * Finalizes a transfer operation.
     *
     * @param id pending transfer id
     */
    @Callable
    public static void finalizeTransfer(long id) {
        requireNoValue();

        require(transfers.containsKey(id));

        StakeTransfer transfer = transfers.remove(id);

        byte[] data = new ABIStreamingEncoder()
                .encodeOneString("finalizeTransfer")
                .encodeOneLong(id)
                .toBytes();
        secureCall(
                transfer.initiator.equals(transfer.fromPool) ? pools.get(transfer.fromPool).custodianAddress : stakerRegistry,
                BigInteger.ZERO, data, Blockchain.getRemainingEnergy());

        delegate(transfer.initiator, transfer.toPool, BigInteger.valueOf(transfer.amount), false);
    }

    /**
     * Returns the auto-redelegation fee set by a delegator, or -1 if not set.
     *
     * @param pool      the pool's address
     * @param delegator the delegator's address
     * @return the fee in percentage, or -1
     */
    @Callable
    public static int getAutoRewardsDelegationFee(Address pool, Address delegator) {
        requirePool(pool);
        requireNoValue();

        return getOrDefault(pools.get(pool).autoRewardsDelegationDelegators, delegator, -1);
    }

    /**
     * Enables auto-redelegation on a pool.
     *
     * @param pool the pool address
     * @param feePercentage the auto-redelegation fee
     */
    @Callable
    public static void enableAutoRewardsDelegation(Address pool, int feePercentage) {
        requirePool(pool);
        require(feePercentage >= 0 && feePercentage <= 100);
        requireNoValue();

        pools.get(pool).autoRewardsDelegationDelegators.put(Blockchain.getCaller(), feePercentage);
    }

    /**
     * Disables auto-redelegation on a pool.
     *
     * @param pool the pool address
     */
    @Callable
    public static void disableAutoRewardsDedelegation(Address pool) {
        requirePool(pool);
        requireNoValue();

        pools.get(pool).autoRewardsDelegationDelegators.remove(Blockchain.getCaller());
    }

    /**
     * Delegates one delegator's block rewards to the pool. The caller
     * gets the auto-redelegation fee.
     *
     * @param pool the pool address
     * @param delegator the delegator address
     */
    @Callable
    public static void autoDelegateRewards(Address pool, Address delegator) {
        requirePool(pool);
        requireNonNull(delegator);
        requireNoValue();

        detectBlockRewards(pool);

        // check auto-redelegation authorization
        PoolState ps = pools.get(pool);
        require(ps.autoRewardsDelegationDelegators.containsKey(delegator));

        // do a withdraw
        long amount = ps.rewards.onWithdraw(delegator, Blockchain.getBlockNumber());
        if (delegator.equals(ps.stakerAddress)) {
            amount += ps.rewards.onWithdrawOperator();
        }

        Blockchain.println("Auto delegation: rewards = " + amount);

        if (amount > 0) {
            long fee = amount * ps.autoRewardsDelegationDelegators.get(delegator) / 100;
            long remaining = amount - fee;

            Blockchain.println("Auto delegation: fee = " + fee + ", remaining = " + remaining);

            // transfer fee to the caller
            secureCall(Blockchain.getCaller(), BigInteger.valueOf(fee), new byte[0], Blockchain.getRemainingEnergy());

            // use the remaining rewards to delegate
            if (delegator.equals(pool)) {
                secureCall(ps.custodianAddress, BigInteger.valueOf(remaining), new byte[0], Blockchain.getRemainingEnergy());
            }
            delegate(delegator, pool, BigInteger.valueOf(remaining), true);
        }
    }

    /**
     * Delegates to a pool and enables auto-redelegation.
     *
     * @param pool the pool address
     * @param fee the auto-redelegation fee
     */
    @Callable
    public static void delegateAndEnableAutoRedelegation(Address pool, int fee) {
        requirePool(pool);
        require(fee >= 0 && fee <= 100);
        requirePositive(Blockchain.getValue());

        delegate(Blockchain.getCaller(), pool, Blockchain.getValue(), true);
        enableAutoRewardsDelegation(pool, fee);
    }

    /**
     * Returns the outstanding rewards of a delegator.
     *
     * @param pool      the pool address
     * @param delegator the delegator address
     * @return the amount of outstanding rewards
     */
    public static long getRewards(Address pool, Address delegator) {
        requirePool(pool);
        requireNonNull(delegator);
        requireNoValue();

        return pools.get(pool).rewards.getRewards(delegator, Blockchain.getBlockNumber());
    }

    /**
     * Withdraws block rewards from one pool.
     *
     * @param pool the pool address
     */
    @Callable
    public static long withdraw(Address pool) {
        Address caller = Blockchain.getCaller();
        requirePool(pool);
        requireNoValue();

        detectBlockRewards(pool);

        // query withdraw amount from rewards state machine
        PoolState ps = pools.get(pool);
        long amount = ps.rewards.onWithdraw(caller, Blockchain.getBlockNumber());
        if (caller.equals(ps.stakerAddress)) {
            amount += ps.rewards.onWithdrawOperator();
        }

        // do a transfer
        if (amount > 0) {
            secureCall(caller, BigInteger.valueOf(amount), new byte[0], Blockchain.getRemainingEnergy());
        }
        return amount;
    }

    /**
     * Returns the status of a pool.
     *
     * @param pool the pool address.
     * @return
     */
    @Callable
    public static String getPoolStatus(Address pool) {
        requirePool(pool);
        requireNoValue();
        return pools.get(pool).isActive ? "ACTIVE" : "BROKEN";
    }

    @Callable
    public static void onSigningAddressChange(Address staker, Address newSigningAddress) {

        // do nothing
    }

    @Callable
    public static void onCoinbaseAddressChange(Address staker, Address newCoinbaseAddress) {
        onlyStakerRegistry();
        requireNonNull(newCoinbaseAddress);
        requireNoValue();

        checkPoolState(staker);
    }

    @Callable
    public static void onListenerAdded(Address staker) {
        onlyStakerRegistry();
        requireNoValue();

        checkPoolState(staker);
    }

    @Callable
    public static void onListenerRemoved(Address staker) {
        onlyStakerRegistry();
        requireNoValue();

        checkPoolState(staker);
    }

    @Callable
    public static void onSlashing(Address staker, long amount) {
        PoolState ps = pools.get(staker);
        if (ps != null) {
            // the slashing amount should be greater than the stake
            require(getStake(staker, staker) >= amount);

            // do a un-delegate
            undelegate(staker, staker, amount, false);

            // check pool state
            checkPoolState(staker);
        }
    }

    private static void checkPoolState(Address staker) {
        PoolState ps = pools.get(staker);
        if (ps != null) {
            boolean active = isActive(staker);
            if (ps.isActive && !active) {
                switchToBroken(ps);
            }
            if (!ps.isActive && active) {
                switchToActive(ps);
            }
        }
    }

    private static boolean isActive(Address pool) {
        // TODO: optimize - checking all three condition each time costs too much energy
        return isCoinbaseSetup(pool) && isListenerSetup(pool) && isSelfStakeSatisfied(pool) && isStakerActive(pool);
    }

    private static boolean isStakerRegistered(Address staker) {
        byte[] txData = new ABIStreamingEncoder()
                .encodeOneString("isStaker")
                .encodeOneAddress(staker)
                .toBytes();
        Result result = secureCall(stakerRegistry, BigInteger.ZERO, txData, Blockchain.getRemainingEnergy());
        boolean isStaker = new ABIDecoder(result.getReturnData()).decodeOneBoolean();

        return isStaker;
    }

    private static boolean isStakerActive(Address pool) {
        requirePool(pool);

        byte[] txData = new ABIStreamingEncoder()
                .encodeOneString("isActive")
                .encodeOneAddress(pool)
                .toBytes();
        Result result = secureCall(stakerRegistry, BigInteger.ZERO, txData, Blockchain.getRemainingEnergy());
        return new ABIDecoder(result.getReturnData()).decodeOneBoolean();
    }

    private static boolean isCoinbaseSetup(Address pool) {
        requirePool(pool);

        byte[] txData = new ABIStreamingEncoder()
                .encodeOneString("getCoinbaseAddress")
                .encodeOneAddress(pool)
                .toBytes();
        Result result = secureCall(stakerRegistry, BigInteger.ZERO, txData, Blockchain.getRemainingEnergy());
        Address coinbaseAddress = new ABIDecoder(result.getReturnData()).decodeOneAddress();

        PoolState ps = pools.get(pool);
        return ps.coinbaseAddress.equals(coinbaseAddress);
    }

    private static boolean isListenerSetup(Address pool) {
        requirePool(pool);

        byte[] txData = new ABIStreamingEncoder()
                .encodeOneString("isListener")
                .encodeOneAddress(pool)
                .encodeOneAddress(Blockchain.getAddress())
                .toBytes();
        Result result = secureCall(stakerRegistry, BigInteger.ZERO, txData, Blockchain.getRemainingEnergy());
        return new ABIDecoder(result.getReturnData()).decodeOneBoolean();
    }

    private static boolean isSelfStakeSatisfied(Address pool) {
        requirePool(pool);

        PoolState ps = pools.get(pool);
        BigInteger stake = getOrDefault(ps.delegators, ps.stakerAddress, BigInteger.ZERO);

        // can implement a self-bond percentage very easily here
        return stake.compareTo(MIN_SELF_STAKE) >= 0;
    }


    private static void switchToActive(PoolState ps) {
        ps.isActive = true;
        ps.rewards.setCommissionRate(ps.commissionRate);
    }

    private static void switchToBroken(PoolState ps) {
        ps.isActive = false;
        ps.rewards.setCommissionRate(0);

        // alternatively, punishment could be making the staker inactive
    }

    private static void require(boolean condition) {
        Blockchain.require(condition);
    }

    private static void requireNonNull(Object obj) {
        require(obj != null);
    }

    private static void requireNoValue() {
        require(Blockchain.getValue().equals(BigInteger.ZERO));
    }

    private static void requirePool(Address pool) {
        require(pool != null && pools.containsKey(pool));
    }

    private static void requirePositive(BigInteger num) {
        require(num != null && num.compareTo(BigInteger.ZERO) > 0);
    }

    private static void requirePositive(long num) {
        require(num > 0);
    }

    private static void onlyStakerRegistry() {
        Address caller = Blockchain.getCaller();
        require(caller.equals(stakerRegistry));
    }

    private static byte[] hexStringToByteArray(String s) {
        // TODO: use static variable
        int[] map = new int[256];
        int value = 0;
        for (char c : "0123456789abcdef".toCharArray()) {
            map[c] = value++;
        }

        char[] chars = s.toCharArray();
        int length = chars.length;
        byte[] result = new byte[length / 2];
        for (int i = 0; i < length; i += 2) {
            result[i / 2] = (byte) ((map[chars[i]] << 4) + map[chars[i + 1]]);
        }
        return result;
    }

    private static Result secureCall(Address targetAddress, BigInteger value, byte[] data, long energyLimit) {
        Result result = Blockchain.call(targetAddress, value, data, energyLimit);
        require(result.isSuccess());
        return result;
    }


    private static <K, V> V getOrDefault(Map<K, V> map, K key, V defaultValue) {
        if (map.containsKey(key)) {
            return map.get(key);
        } else {
            return defaultValue;
        }
    }

    private static void detectBlockRewards(Address pool) {
        PoolState ps = pools.get(pool);

        BigInteger balance = Blockchain.getBalance(ps.coinbaseAddress);
        if (balance.compareTo(BigInteger.ZERO) > 0) {
            byte[] data = new ABIStreamingEncoder()
                    .encodeOneString("transfer")
                    .encodeOneAddress(Blockchain.getAddress())
                    .encodeOneLong(balance.longValue())
                    .toBytes();
            secureCall(ps.coinbaseAddress, BigInteger.ZERO, data, Blockchain.getRemainingEnergy());

            ps.rewards.onBlock(Blockchain.getBlockNumber(), balance.longValue());

            Blockchain.println("New block rewards: " + balance);
        }
    }
}
